import numpy as np


def import_bolsig_output(mypath):
    """
    Read a ".dat" output file generated by Bolsig+ (version 12/2017), and returns all the calculated transport coefficients and rate coefficients in a dictionary.
    This assumes the Bolsig+ output was saved in the "combined tables" format.
    """
    with open(mypath,'r') as fh:

        while 'Transport coefficients' not in fh.readline(): # look for the section concerning tranport coefficients
            pass

        order = {1: 'E/N (Td)'} # column index of the E/N values 
        data = {'E/N (Td)': []} # list for storing E/N values

        for i, paramline in enumerate(fh, start=2): # look for the names of the calculated transport coefficients
            if 'R#' in paramline:
                break
            else:
                paramname = paramline[4:].strip()
                data[paramname] = [] # add the names as keys in the dict (to associate later the list of calculated values)
                order[i] = paramname # store the column index of each coefficient (starts at 2 for transport coeffs.)

        for runline in fh: # read the calculated values line by line
            strval = runline.split()
            if len(strval) > 0:
                for i, strv in enumerate(strval): # read the calculated values column by column
                    if i in order.keys():
                        data[order[i]].append(float(strv)) # add value for each coeff.
            else:
                break
        
        while 'Rate coefficients' not in fh.readline(): # look for the section concerning rate coefficients
            pass

        order = {} # column indexes 

        for i, paramline in enumerate(fh, start=3): # look for the names of the calculated rate coefficients
            if 'R#' in paramline:
                break
            else:
                paramname = paramline[4:].strip()
                data[paramname] = [] # add the names as keys in the dict
                order[i] = paramname # store the column index of each coefficient (starts at 3 for rate coeffs.)

        n_line = 0
        for runline in fh: # read the calculated values line by line
            strval = runline.split()
            if len(strval) > 0:
                if float(strval[1]) != data['E/N (Td)'][n_line]: # check if the tabulated E/N values match
                    print('The E/N values from the tabulated transport coefficients and rate coefficients do not match. Check the .dat file.')
                    return {}
                for i, strv in enumerate(strval): # read the calculated values column by column
                    if i in order.keys():
                        data[order[i]].append(float(strv))
                n_line += 1
            else:
                break
        
    for key in data.keys():
        data[key] = np.asarray(data[key]) # transport lists to numpy arrays to be able to perform calculations

    return data


def import_lxcat_swarm_data(mypath):
    """
    Read a "Author_Year_Parameter.txt" file containing swarm data downloaded from the lxcat data center and returns the measured parameter in a dictionary.
    """
    filename = filename_from_path(mypath)
    infos = filename.split('_')
    try:
        data = {'Author': infos[0], 'Year': infos[1], 'Parameter': infos[2], 'E/N': [], infos[2]: []}
    except IndexError:
        print('Incorrect file name, please use the format "../Author_Year_Parameter.txt".')
        return {}
    
    with open(mypath, 'r', encoding="utf8") as fh:
        for fh_line in fh:
            if '---' in fh_line:
                break # find the first occurence of '---' start of tabulated data
        for fh_line in fh:
            if '---' in fh_line:
                break
            else:
                s = fh_line.split()
                data['E/N'].append(float(s[0]))
                data[infos[2]].append(float(s[1]))

    data['E/N'] = np.asarray(data['E/N'])
    data[infos[2]] = np.asarray(data[infos[2]])

    return data


def filename_from_path(mypath):
    """
    Returns as a string the name of the file, without file extension, from the given path.
    """
    mypath = mypath.replace('\\','/') # in case the path is given as 'C:\\folder1\\folder2\\file.txt'
    name = mypath.split('/')[-1] # name is something like 'file.txt'
    name = name.split('.')[0] # remove file extension, now name is something like 'file'

    return name

